# -*- coding: utf-8 -*-
"""Tarea 6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12WaM9NS8U1rUPhXKakiotFlFvViC1ErL
"""

# Exercise 1: Determinante de una matriz 2x2

# usar la fórmula ad - cb se calcula el dterminante de matrices 2x2
def calcular_determinante(matriz):
    producto_ad = matriz[0][0] * matriz[1][1]
    producto_cb = matriz[1][0] * matriz[0][1]
    return producto_ad - producto_cb

# pedir al usuario 4 valores
# y constrir la matriz 2x2. tambien checa que se ingresen 2 valores por fila.
def construir_matriz():
    print("Ingrese los valores para la primera fila (2 valores, separados por espacios):")
    fila1 = [int(val) for val in input().split()]

    print("Ingrese los valores para la segunda fila (2 valores, separados por espacios):")
    fila2 = [int(val) for val in input().split()]

    if len(fila1) != 2 or len(fila2) != 2:
        print("No es una matriz 2x2")
        return None

    return [fila1, fila2]

# La función principal organiza la ejecución:
# 1. Muestra un título.
# 2. Llama a la función para crear la matriz.
# 3. Si la matriz es válida, calcula e imprime el determinante.
def main():
    print("--- Calculadora del Determinante de una matriz 2x2 ---")
    matriz = construir_matriz()
    if matriz is not None:
        determinante = calcular_determinante(matriz)
        print(f"\nEl determinante de la matriz {matriz} es: {determinante}")

# Inicia el programa.
main()

# Exercise 2: Conteo de números primos por fila

# la función verifica si un número 'n' es primo.
# Utiliza operaciones matempaticas para comprobarlo
def es_primo(n):
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

# Recorre cada fila de la matriz, cuenta cuántos de sus números
# saca los primos usando la función es_primo(), y devuelve una lista con los resultados.
def contar_primos_por_fila(matriz):
    conteo_primos = []
    for fila in matriz:
        conteo_fila = 0
        for numero in fila:
            if es_primo(numero):
                conteo_fila += 1
        conteo_primos.append(conteo_fila)
    return conteo_primos

# La función principal:
#Pide las dimensiones de la matriz.
#Pide al usuario que ingrese todos los valores de la matriz.
#Llama a la función de conteo e imprime la matriz original y el resultado.
def main():
    num_filas = int(input("Ingrese el número de filas de la matriz: "))
    num_columnas = int(input("Ingrese el número de columnas de la matriz: "))

    if num_filas <= 0 or num_columnas <= 0:
        print("Error: El número de filas y columnas debe ser positivo.")
        return

    print("\n--- Ingrese los datos de la matriz ---")
    matriz = []
    for i in range(num_filas):
        fila = []
        print(f"Fila {i+1}:")
        for j in range(num_columnas):
            valor = int(input())
            fila.append(valor)
        matriz.append(fila)

    resultado = contar_primos_por_fila(matriz)
    print("\n--- Matriz Leída ---")
    for fila in matriz:
        print(fila)
    print("\n--- Salida ---")
    print(f"Lista de cantidad de primos por fila: {resultado}")

# Inicia el programa.
main()

# Exercise 3: Crear matriz con números consecutivos por fila

# Esta función realiza este proceso:
# 1. Pide al usuario las dimensiones n y m, validando que sean mayores o iguales a 2
# 2. Maneja errores si la entrada no es un número
# 3. Crea una matriz vacía
# 4. Usa dos ciclos anidados para construir cada fila con números del 1 a m
# 5. Imprime la matriz resultante
def crear_matriz_consecutiva():
    try:
        n = int(input("Ingrese el número de filas (n, debe ser >= 2): "))
        if n < 2:
            print("Error")
            return
        m = int(input("Ingrese el número de columnas (m, debe ser >= 2): "))
        if m < 2:
            print("Error")
            return
    except ValueError:
        print("Error")
        return

    matriz = []
    for i in range(n):
        fila = []
        contador = 1
        for j in range(m):
            fila.append(contador)
            contador += 1
        matriz.append(fila)

    print(matriz)

# Llama a la función para ejecutar todo
crear_matriz_consecutiva()